// -*- C++ -*-
#pragma once

#include "c/SYS_open.h"
#include "c/mode_t.h"
#include "Result"

namespace system {

static inline
auto
open(const char* pathname, int flags) noexcept
{
#define _(name) _##name = name
    enum Error
    {
#if defined(__linux__) || defined(__FreeBSD__)
#  include "c/EACCES.h"
        _(EACCES),
#endif
#if defined(__FreeBSD__)
#  include "c/EBADF.h"
        _(EBADF),
#endif
#if defined(__linux__) || defined(__FreeBSD__)
#  include "c/EDQUOT.h"
#  include "c/EEXIST.h"
#  include "c/EFAULT.h"
#  include "c/EINTR.h"
#  include "c/EINVAL.h"
        _(EDQUOT),
        _(EEXIST),
        _(EFAULT),
        _(EINTR),
        _(EINVAL),
#endif
#if defined(__FreeBSD__)
#  include "c/EIO.h"
        _(EIO),
#endif
#if defined(__linux__) || defined(__FreeBSD__)
#  include "c/EISDIR.h"
#  include "c/ELOOP.h"
#  include "c/EMFILE.h"
#  include "c/ENAMETOOLONG.h"
        _(EISDIR),
        _(ELOOP),
        _(EMFILE),
        _(ENAMETOOLONG),
#endif
#if defined(__linux__)
#  include "c/ENFILE.h"
#  include "c/ENODEV.h"
        _(ENFILE),
        _(ENODEV),
#endif
#if defined(__linux__) || defined(__FreeBSD__)
#  include "c/ENOENT.h"
        _(ENOENT),
#endif
#if defined(__linux__)
#  include "c/ENOMEM.h"
        _(ENOMEM),
#endif
#if defined(__linux__) || defined(__FreeBSD__)
#  include "c/ENOSPC.h"
#  include "c/ENOTDIR.h"
#  include "c/ENXIO.h"
#  include "c/EOPNOTSUPP.h"
        _(ENOSPC),
        _(ENOTDIR),
        _(ENXIO),
        _(EOPNOTSUPP),
#endif
#if defined(__linux__)
#  include "c/EOVERFLOW.h"
        _(EOVERFLOW),
#endif
#if defined(__linux__) || defined(__FreeBSD__)
#  include "c/EPERM.h"
#  include "c/EROFS.h"
#  include "c/ETXTBSY.h"
#  include "c/EWOULDBLOCK.h"
        _(EPERM),
        _(EROFS),
        _(ETXTBSY),
        _(EWOULDBLOCK),
#endif
    };
#undef _

    return Result<int, Error>(SYS_open, pathname, flags);
}

}
